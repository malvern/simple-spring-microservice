{
	"info": {
		"_postman_id": "cc420740-9b48-4cb7-aca9-9bf45d0c1e55",
		"name": "contact-service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "IntegrationApi",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\",1);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"  ",
							"});",
							"pm.test(\"Success Response body\",function(){",
							"  const contactResponse = pm.response.json();",
							"    pm.expect(contactResponse[0].id).to.eql(1);",
							"    pm.expect(contactResponse[0].email).to.eql(\"Sincere@april.biz\");",
							"    pm.expect(contactResponse[0].phone).to.eql(\"1-770-736-8031 x56442\");",
							"    pm.expect(contactResponse[0].website).to.eql(\"hildegard.org\");",
							"    pm.expect(contactResponse[0].name).to.eql(\"Leanne Graham\");",
							"    pm.expect(contactResponse[0].address.street).to.eql(\"Kulas Light\");",
							"    pm.expect(contactResponse[0].address.suite).to.eql(\"Apt. 556\");",
							"    pm.expect(contactResponse[0].address.city).to.eql(\"Gwenborough\");",
							"    pm.expect(contactResponse[0].address.zipcode).to.eql(\"92998-3874\");",
							"    pm.expect(contactResponse[0].address.geo.lat).to.eql(\"-37.3159\");",
							"    pm.expect(contactResponse[0].address.geo.lng).to.eql(\"81.1496\");",
							"    pm.expect(contactResponse[0].company.name).to.eql(\"Romaguera-Crona\");",
							"    pm.expect(contactResponse[0].company.bs).to.eql(\"harness real-time e-markets\");",
							"    pm.expect(contactResponse[0].company.catchPhrase).to.eql(\"Multi-layered client-server neural-net\");",
							"})",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users?id={{id}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search-by-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"  ",
							"});",
							"pm.test(\"Success Response body\",function(){",
							"  const contactResponse = pm.response.json();",
							"    pm.expect(contactResponse[0].id).to.eql(1);",
							"    pm.expect(contactResponse[0].email).to.eql(\"Sincere@april.biz\");",
							"    pm.expect(contactResponse[0].phone).to.eql(\"1-770-736-8031 x56442\");",
							"})",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\",1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/getusercontacts?id={{id}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"getusercontacts"
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search-by-username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"  ",
							"});",
							"pm.test(\"Success Response body\",function(){",
							"  const contactResponse = pm.response.json();",
							"    pm.expect(contactResponse[0].id).to.eql(1);",
							"    pm.expect(contactResponse[0].email).to.eql(\"Sincere@april.biz\");",
							"    pm.expect(contactResponse[0].phone).to.eql(\"1-770-736-8031 x56442\");",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"username\",\"Bret\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/getusercontacts?username={{username}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"getusercontacts"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search-by-username-and-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"",
							"});",
							"pm.test(\"Failed Response body\", function () {",
							"    const errorResponse = pm.response.json();",
							"    pm.expect(errorResponse.id).to.eql(-2);",
							"    pm.expect(errorResponse.narrative).to.eql(\"Only Id or Username can be used for search not both\");",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\",1);",
							"pm.collectionVariables.set(\"username\",\"Bret\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/getusercontacts?username={{username}}&id={{id}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"getusercontacts"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username}}"
						},
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search-with-empty-username-and-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"",
							"});",
							"pm.test(\"Failed Response body\", function () {",
							"    const errorResponse = pm.response.json();",
							"    pm.expect(errorResponse.id).to.eql(-2);",
							"    pm.expect(errorResponse.narrative).to.eql(\"Id or Username cannot be empty\");",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/getusercontacts",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"getusercontacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "search-with-invalid-id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\",-19);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"",
							"});",
							"pm.test(\"Internal Error Occurred\", function () {",
							"    const errorResponse = pm.response.json();",
							"    pm.expect(errorResponse.id).to.eql(-3);",
							"    pm.expect(errorResponse.narrative).to.eql(\"Internal error occurred\");",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/getusercontacts?id=\"{{id}}\"",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"getusercontacts"
					],
					"query": [
						{
							"key": "id",
							"value": "\"{{id}}\""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search-no-results-found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});",
							"pm.test(\"No Results found\", function () {",
							"    const errorResponse = pm.response.json();",
							"    pm.expect(errorResponse.id).to.eql(-1);",
							"    pm.expect(errorResponse.narrative).to.eql(\"No contacts found\");",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\",100000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/getusercontacts?id={{id}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"getusercontacts"
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		}
	]
}